{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darek\\\\IdeaProjects\\\\guessing-game\\\\src\\\\ScoreList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScoreList = ({\n  username,\n  difficulty\n}) => {\n  _s();\n  const [scores, setScores] = useState([]);\n  useEffect(() => {\n    axios.get(`http://localhost:8080/scores/filter?username=${username}&difficulty=${difficulty}`).then(response => {\n      setScores(response.data);\n    }).catch(error => {\n      console.error(\"Błąd podczas pobierania wyników:\", error);\n    });\n  }, [username, difficulty]);\n\n  // Funkcja pomocnicza do formatowania daty\n  const formatDate = dateString => {\n    if (!dateString) return \"Brak daty\";\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat(\"pl-PL\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\"\n    }).format(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Wyniki dla \", username, \" (\", difficulty, \"):\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: scores.map((score, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Wynik: \", score.score, \", Data: \", formatDate(score.date)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(ScoreList, \"Yyk7VGwHemHEYHhwndV2GCDMHOA=\");\n_c = ScoreList;\nexport default ScoreList;\nvar _c;\n$RefreshReg$(_c, \"ScoreList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ScoreList","username","difficulty","_s","scores","setScores","get","then","response","data","catch","error","console","formatDate","dateString","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","children","fileName","_jsxFileName","lineNumber","columnNumber","map","score","index","_c","$RefreshReg$"],"sources":["C:/Users/darek/IdeaProjects/guessing-game/src/ScoreList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ScoreList = ({ username, difficulty }) => {\r\n    const [scores, setScores] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8080/scores/filter?username=${username}&difficulty=${difficulty}`)\r\n            .then(response => {\r\n                setScores(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Błąd podczas pobierania wyników:\", error);\r\n            });\r\n    }, [username, difficulty]);\r\n\r\n    // Funkcja pomocnicza do formatowania daty\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return \"Brak daty\";\r\n        const date = new Date(dateString);\r\n        return new Intl.DateTimeFormat(\"pl-PL\", {\r\n            year: \"numeric\",\r\n            month: \"long\",\r\n            day: \"numeric\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n            second: \"2-digit\",\r\n        }).format(date);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Wyniki dla {username} ({difficulty}):</h2>\r\n            <ul>\r\n                {scores.map((score, index) => (\r\n                    <li key={index}>\r\n                        Wynik: {score.score}, Data: {formatDate(score.date)}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScoreList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZE,KAAK,CAACS,GAAG,CAAC,gDAAgDL,QAAQ,eAAeC,UAAU,EAAE,CAAC,CACzFK,IAAI,CAACC,QAAQ,IAAI;MACdH,SAAS,CAACG,QAAQ,CAACC,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC5D,CAAC,CAAC;EACV,CAAC,EAAE,CAACV,QAAQ,EAAEC,UAAU,CAAC,CAAC;;EAE1B;EACA,MAAMW,UAAU,GAAIC,UAAU,IAAK;IAC/B,IAAI,CAACA,UAAU,EAAE,OAAO,WAAW;IACnC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,OAAO,IAAIG,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MACpCC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACZ,CAAC,CAAC,CAACC,MAAM,CAACV,IAAI,CAAC;EACnB,CAAC;EAED,oBACIhB,OAAA;IAAA2B,QAAA,gBACI3B,OAAA;MAAA2B,QAAA,GAAI,aAAW,EAACzB,QAAQ,EAAC,IAAE,EAACC,UAAU,EAAC,IAAE;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9C/B,OAAA;MAAA2B,QAAA,EACKtB,MAAM,CAAC2B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACrBlC,OAAA;QAAA2B,QAAA,GAAgB,SACL,EAACM,KAAK,CAACA,KAAK,EAAC,UAAQ,EAACnB,UAAU,CAACmB,KAAK,CAACjB,IAAI,CAAC;MAAA,GAD9CkB,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAC3B,EAAA,CAvCIH,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAyCf,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}